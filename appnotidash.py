# -*- coding: utf-8 -*-
"""AppNotiDash.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ke-tUSx7I4aw1UiSKTxBxaA0A9xlmcB6
"""

import streamlit as st
import pandas as pd
import altair as alt

def main():
    # Load your dataset (replace 'your_dataset.csv' with your actual dataset path)
    df = pd.read_csv('appnotidata2.csv')

    # Ensure SEND_TIME is in datetime format
    df['SEND_TIME'] = pd.to_datetime(df['SEND_TIME'])

    # Mapping of original TAGS_INCLUDED values to more user-friendly names
    tags_mapping = {
        'SEND2 I:END_QUARTER  IO:OR EO:OR': 'End of Quarter',
        'SEND2 I:START_GAME  IO:OR EO:OR': 'Start of Game',
        'SEND2 I:END_GAME  IO:OR EO:OR': 'End of Game',
        'SEND2 I:NEWS,START_GAME,END_QUARTER,END_GAME,TEAM_NEWS,NEWS E: IO:OR EO:OR': 'Experience Rating'
    }

    # Apply the mapping to the TAGS_INCLUDED column for the dropdown
    df['TAG_LABEL'] = df['TAGS_INCLUDED'].map(tags_mapping)

    # Dropdown for TAG_LABEL
    tags = df['TAG_LABEL'].unique()
    selected_tag_label = st.selectbox("Select Notification Type", tags)

    # Filter data based on selected tag label
    filtered_df = df[df['TAG_LABEL'] == selected_tag_label]

    # Create the bar chart for CLICKS
    chart_clicks = alt.Chart(filtered_df).mark_bar().encode(
        x=alt.X('SEND_TIME:T', title='Send Time'),
        y=alt.Y('CLICKS:Q', title='Clicks'),
        tooltip=['SEND_TIME', 'CLICKS']
    ).properties(
        width=700,
        height=400,
        title=f'Clicks Over Time for {selected_tag_label}'
    ).interactive()

    # Display the clicks chart
    st.altair_chart(chart_clicks)

    # Calculate and display average clicks per day
    daily_avg_clicks = filtered_df.resample('D', on='SEND_TIME')['CLICKS'].mean().mean()
    st.write(f"**Average Clicks per Day for {selected_tag_label}:** {daily_avg_clicks:.2f}")

    # Create the line chart for Clickrate (mean per day)
    clickrate_df = filtered_df.resample('D', on='SEND_TIME')['clickrate'].mean().reset_index()

    chart_clickrate = alt.Chart(clickrate_df).mark_line(point=True).encode(
        x=alt.X('SEND_TIME:T', title='Send Time'),
        y=alt.Y('clickrate:Q', title='Mean Clickrate'),
        tooltip=['SEND_TIME', 'clickrate']
    ).properties(
        width=700,
        height=400,
        title=f'Mean Clickrate Over Time for {selected_tag_label}'
    ).interactive()

    # Display the clickrate chart
    st.altair_chart(chart_clickrate)

    # Calculate and display overall mean clickrate
    overall_mean_clickrate = clickrate_df['clickrate'].mean()
    st.write(f"**Overall Mean Clickrate for {selected_tag_label}:** {overall_mean_clickrate:.2f}")

# Run the main function
if __name__ == "__main__":
    main()
